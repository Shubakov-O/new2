# Имя рабочего процесса, которое будет отображаться на вкладке Actions репозитория
name: golang-pipeline
# Указывает, какие события могут вызывать запуск рабочего процесса. Запуск рабочего 
# процесса запускается каждый раз, когда кто-то отправляет изменение в репозиторий или 
# объединяет запрос на извлечение. Это происходит при отправке в любую ветку
on: push
# Группирует все задания, которые выполняются в рабочем процессе golang-pipeline
jobs:
# Определяет задание test. Дочерние ключи будут определять свойства этого задания
  test:
  # Настраивает задание test для запуска в последней версии Ubuntu Linux runner. 
  # Задание будет выполняться на новой виртуальной машине GitHub
    runs-on: ubuntu-latest
    # Добавляет и запускает Docker-контейнер golang:1.22 для запуска тестов
    container: golang:1.21.4
    # Шаги задания
    steps:
    # Это действие проверяет ваш репозиторий, чтобы ваш рабочий процесс мог получить 
    # к нему доступ. Используйте последнюю версию 4. Ссылка на страничку это версии в 
    # маркетплейсе GitHub.
      - uses: actions/checkout@v4

      - name: Run Unit Tests
      # Команда для запуска. Она запускает Go тесты, которые вы написали
        run: GOOS=linux GOARCH=amd64 go test
      # Первый шаг будет запускать команду go vet, чтобы проверить код на наличие ошибок. 
      # Шаг так и будет называться - Vet.
      - name: Vet
      # Запускает команду go vet
        run: |
          go vet ./...